# from tensorflow.keras.models import Sequential
# from tensorflow.keras.layers import *
# from tensorflow.keras.callbacks import ModelCheckpoint
# from tensorflow.keras.losses import MeanSquaredError
# from tensorflow.keras.metrics import RootMeanSquaredError
# from tensorflow.keras.optimizers import Adam

# model1 = Sequential()
# model1.add(InputLayer((5, 1)))
# model1.add(LSTM(64))
# model1.add(Dense(8, 'relu'))
# model1.add(Dense(1, 'linear'))

# model1.summary()

# cp1 = ModelCheckpoint('model1/model.keras', save_best_only=True)
# model1.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate=0.0001), metrics=[RootMeanSquaredError()])

# model1.fit(X_train1, y_train1, validation_data=(X_val1, y_val1), epochs=20, callbacks=[cp1])

# from tensorflow.keras.models import load_model
# model1 = load_model('model1/model.keras')

# train_predictions = model1.predict(X_train1).flatten()
# train_results = pd.DataFrame(data={'Train Predictions':train_predictions, 'Actuals':y_train1})
# train_results

# plt.figure(figsize=(10, 6))

# # Настройка графика
# plt.plot(train_results['Train Predictions'][50:100], label='Тренировочные предсказания', color='red')
# plt.plot(train_results['Actuals'][50:100], label='Реальные значения', color='blue')
# plt.title('Сравнение предсказанных и реальных значений')
# plt.xlabel('Индекс')
# plt.ylabel('Значение')
# plt.legend()

# # Показать график
# plt.show()

# val_predictions = model1.predict(X_val1).flatten()
# val_results = pd.DataFrame(data={'Val Predictions':val_predictions, 'Actuals':y_val1})
# val_results

# plt.plot(val_results['Val Predictions'][:100])
# plt.plot(val_results['Actuals'][:100])

test_predictions = model1.predict(X_test1).flatten()
test_results = pd.DataFrame(data={'Test Predictions':test_predictions, 'Actuals':y_test1})
test_results

plt.plot(test_results['Test Predictions'][:100])
plt.plot(test_results['Actuals'][:100])